name: philos

on:
  push:

jobs:
  build-project:

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies (LINUX)
        if: runner.os == 'Linux'
        run: |
          sudo apt update 
          sudo apt install -y valgrind
      - name: Install dependencies (MACOS)
        if: runner.os == 'macOs'
        run: |
          brew update
          brew install make gcc
      - name: Install dependencies (WINDOWS)
        if: runner.os == 'Windows'
        run: |
          choco install make -y
          choco install mingw -y
        shell: bash

      - name: Compile (windows)
        if: runner.os == 'Windows'
        run: make CC=gcc

      - name: Compile (Linux / MacOs)
        if: runner.os == 'Linux' || runner.os == 'macOS'
        run: make

      - name: Run 1 philos eat 4 times
        continue-on-error: true
        run: ./philo 1 610 200 200 4

      - name: Run 2 philos eat 4 times
        continue-on-error: true
        run: ./philo 2 410 200 200 4

      - name: Run 4 philos eat 4 times
        continue-on-error: true
        run: ./philo 4 410 200 200 4

      - name: Run 5 philos eat 4 times
        continue-on-error: true
        run: ./philo 5 610 200 200 4

      - name: Run 9 philos eat 4 times
        continue-on-error: true
        run: ./philo 9 35 10 10 4

      - name: Run 200 philos eat 4 times
        continue-on-error: true
        run: ./philo 200 410 200 200 4

      - name: Valgrind (ON LINUX ONLY)
        continue-on-error: true
        if: runner.os == 'Linux'
        run: |
          valgrind --tool=helgrind ./philo 2 410 200 200 4
          valgrind --tool=helgrind ./philo 200 410 200 200 4

      - name: Figure out binary path
        shell: bash
        run: |
          if [ "$RUNNER_OS" = "Windows" ]; then
            echo "BIN=philo.exe" >> $GITHUB_ENV
          else
            echo "BIN=philo" >> $GITHUB_ENV
          fi

      - name: Upload artifact (OS-scoped name)
        uses: actions/upload-artifact@v4
        with:
          name: philo-${{ matrix.os }}          # => philo-ubuntu-latest, philo-macos-latest, philo-windows-latest
          path: ${{ env.BIN }}                  # philo on *nix, philo.exe on Windows

  release-project:
    needs: build-project
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Debug listing
        run: ls -R artifacts

      - name: Create GitHub release
        id: create-release
        uses: actions/create-release@v1
        env: 
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.run_number }}
          release_name: Release ${{ github.run_number }}

      - name: Upload Linux binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: artifacts/philo-ubuntu-latest/philo
          asset_name: philo-linux_v${{ github.run_number }}
          asset_content_type: application/octet-stream

      - name: Upload macOS binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: artifacts/philo-macos-latest/philo
          asset_name: philo-macos_v${{ github.run_number }}
          asset_content_type: application/octet-stream

      - name: Upload Windows binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: artifacts/philo-windows-latest/philo.exe
          asset_name: philo-windows_v${{ github.run_number }}
          asset_content_type: application/octet-stream
